{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Spartan Robotics Software Resources!","text":"<p>This site contains references for all kinds of software resources.</p>"},{"location":"#learning-java","title":"Learning Java","text":"<p>A beginner's guide to the Java programming language.</p>"},{"location":"#setting-up-your-programming-environment","title":"Setting Up Your Programming Environment","text":"<p>How to set up all the tools you need on your own computer.</p>"},{"location":"#command-line-cheat-sheet","title":"Command-Line Cheat Sheet","text":"<p>A survival guide to using the command line.</p>"},{"location":"#java-style-guide","title":"Java Style Guide","text":"<p>Code pattern, style, and formatting guidelines for Java code to help the team stay consistent.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Instructions can be found in the source git repository of this project.</p>"},{"location":"Command-Line%20Cheat%20Sheet/","title":"WIP","text":""},{"location":"Java%20Style%20Guide/","title":"WIP","text":""},{"location":"Learning%20Java/","title":"WIP","text":""},{"location":"Learning%20Java/1%3A%20Variables/","title":"1: Variables","text":"<p>The basic unit of all programming languages is the variable. A variable is very similar to the mathematical variable, except it can hold more than just a numerical value. A program is generally built upon operations between these variables.</p> <p>However, not every operation is supported for every variable or combination of variables. For instance, the concept of adding a number to a word doesn't make any sense and the underlying computer doesn't know how to resolve this.</p> <p><pre><code>\"Hello world!\" + 3     &lt;-- Makes no sense\n</code></pre> <sup>1</sup></p> <p>To fix this problem, variables come with a fundamental trait called their type. The type tells the underlying processor that translates into code a computer can execute (called the compiler) how to treat that variable, and prevents you from trying to run nonsensical operations.</p>"},{"location":"Learning%20Java/1%3A%20Variables/#creating-a-variable","title":"Creating a Variable","text":"<p>In Java, creating a variable follows the pattern: <pre><code>type name = value;\n</code></pre> The <code>=</code> means that we're assigning <code>name</code> to mean <code>value</code>. You can also assign a variable in the place of <code>value</code>, or use the result of an operation.</p> <p>The semicolon at the end tells the Java compiler that that statement ends there. Unlike in some other programming languages, the spacing of symbols and lines is ignored.</p> <p>The name of the variable should be reasonably concise and should describe what the variable represents well. If a variable corresponds to something that could use units of measurement those should be included in the name (e.g. <code>velocityMetersPerSecond</code>), even if this can be slightly verbose.</p> <p>It is also valid to declare a variable exists without giving it a value yet. Trying to use the value of that variable will result in an error though. <pre><code>type name;\n</code></pre></p> <p>After a variable is declared (by either method), you can reassign it by writing: <pre><code>name = newValue;\n</code></pre></p> <p>There are numerous types you can encounter while writing Java for FRC. These can corresponds to simple, small pieces of data, or to much more complex data structures. The next few sections will go into these types.</p> <ol> <li> <p>This works in real life Java, but it's because the compiler makes an implicit cast of the number to a string.\u00a0\u21a9</p> </li> </ol>"},{"location":"Learning%20Java/2%3A%20The%20Program%20Environment/","title":"2: The Program Environment","text":"<p>Throughout this introduction to Java, we'll be providing examples and exercises for the reader. If you have a Java environment already set up, you should follow along in it to build familiarity. Otherwise, an interactive Java environment will be provided for you to work with.</p> public class Main {     public static void main(String[] args) {         System.out.println(\"Hello World!\");     } }"},{"location":"Learning%20Java/2%3A%20The%20Program%20Environment/#hello-world","title":"Hello World!","text":"<p>Writing \"Hello World!\" to the output is the traditional first task when learning a new programming language.</p>"},{"location":"Learning%20Java/2%3A%20The%20Program%20Environment/#the-entry-point","title":"The Entry Point","text":"<p>Most of the above looks like gibberish right now. Public static void? String[] args? You don't need to know what they mean right now, just that this combination of words and symbols tells the compiler that your program should start by running whatever is inside the innermost curly brackets. Java will expect the above code to be in a file called \"Main.java\" (this doesn't matter for online compiler users).</p>"},{"location":"Learning%20Java/2%3A%20The%20Program%20Environment/#systemoutprintln","title":"System.out.println()","text":"<p>This function is very useful in a testing or teaching environment. It simply prints whatever variable you pass to it, followed by a line break. It is the easiest way to quickly see the output of a program.</p>"},{"location":"Learning%20Java/2%3A%20The%20Program%20Environment/#executing-the-code","title":"Executing the Code","text":"<p>Online compiler users can just press the execute button, of course.</p> <p>If you're off in your own Java environment, you need to take a few extra steps. In the terminal, make sure you're in the same working directory as your .java source file. Then run: <pre><code>$ javac &lt;YOUR FILE&gt;.java\n$ java &lt;YOUR FILE&gt;\n</code></pre> There should be no file extension for the second option.</p> <p>If you run into a problem such as \"Command javac not found\", Java likely either a) isn't installed, or b) isn't on your PATH. See Setting Up Your Programming Environment for help.</p>"},{"location":"Learning%20Java/3%3A%20Data%20Types%20of%20Numbers/","title":"3: Data Types of Numbers","text":"<p>Numbers are the most commonly-used types of variables, but there are a couple varieties to be aware of, due to how computers store them.</p>"},{"location":"Learning%20Java/3%3A%20Data%20Types%20of%20Numbers/#how-data-storage-works-in-computers","title":"How Data Storage Works in Computers","text":"<p>This section goes into the details of how computers interpret numbers. It's totally fine to skip over this, as you'll never have to worry at this level. In fact, the point of programming languages is to hide these kind of details.</p> <p>Computers are digital, meaning fundamentally they can only work on binary values, such as 1 or 0. This single piece of information is called a bit. Storing more complex data is done with combinations of multiple bits. Computers also have a maximum number of bits they can work with at a time.</p> <p>With a digital number system, usually only whole numbers, also known as integers, can be expressed. The maximum value that can be held this way is equal to \\(2^{n-1}-1\\)<sup>1</sup>, where N is the number of bits used. For 32-bit systems, this is 2,147,483,647. For 64-bit systems, this is 9,223,372,036,854,775,807. Although the 32-bit number is big, for some applications it can't hold the full number.</p> <p>But what about fractional numbers? Computers do this by allowing the decimal point to shift around in the number. This lets parts of the bits to refer to a whole number, and parts of them to a fraction. These are called floating-point numbers. A 32 bit floating point number is high-precision, but can run into problems with losses of precision if the whole number part grows too large. This is much less common with 64-bit floating point numbers, so we generally use those.</p>"},{"location":"Learning%20Java/3%3A%20Data%20Types%20of%20Numbers/#integers","title":"Integers","text":"<p>Integers (<code>int</code>) are the most basic form of numbers. They can hold whole numbers between -2,147,483,647 and 2,147,483,647. These are often used for applications like counting how many times an event has happened, or how many variables are part of a larger data structure.</p>"},{"location":"Learning%20Java/3%3A%20Data%20Types%20of%20Numbers/#longs","title":"Longs","text":"<p>Longs (<code>long</code>) are similar but more specialized than integers. Use these only if there's a possibility of a variable taking on an absolutely massive value (outside of the bounds of an integer). Typically, this means keeping track of a clock value at high precision.</p>"},{"location":"Learning%20Java/3%3A%20Data%20Types%20of%20Numbers/#doubles","title":"Doubles","text":"<p>Doubles (<code>double</code>) are used whenever you need to express a number that isn't necessarily whole.</p>"},{"location":"Learning%20Java/3%3A%20Data%20Types%20of%20Numbers/#picking-a-number-type","title":"Picking a Number Type","text":"<pre><code>flowchart TD\n    start[Would it make sense for this variable to hold a fractional value?]\n    whole[Could it possibly hold a value greater than 2 billion?]\n    start--&gt;|Yes|double\n    start--&gt;|No|whole\n    whole--&gt;|Yes|long\n    whole--&gt;|No|int\n</code></pre>"},{"location":"Learning%20Java/3%3A%20Data%20Types%20of%20Numbers/#number-operations","title":"Number Operations","text":"<p>Standard mathematical operations between numbers are fairly intuitive.</p> Showpublic class Main {     public static void main(String[] args) {          int a = 5;         double b = 1.5;         double c = a + b;         // int c = a + b; // doesn't work!         System.out.println(c);          long d = 3;         double e = b;         System.out.println(d * e);          a = 7;         System.out.println(a - d);      } } <p>The above illustrates how the compiler is generally able to translate between these types as needed. </p>"},{"location":"Learning%20Java/3%3A%20Data%20Types%20of%20Numbers/#exercise-1","title":"Exercise #1","text":"<p>Try uncommenting the 4th line of code and commenting line #3 to see what happens!</p> SolutionThe compiler throws an error because you're trying to turn a number (in this case a double) into something less general (an int)."},{"location":"Learning%20Java/3%3A%20Data%20Types%20of%20Numbers/#typecasting","title":"Typecasting","text":"<p>As users, we can also convert values between types. This is done by writing <code>(new type) value</code>. Note that this doesn't change the type of the base variable, just creates a new equivalent value of the other type. Lots of casts (most) are not valid, and will throw a compiler error.</p> Showpublic class Main {     public static void main(String[] args) {          System.out.println(58);         System.out.println((double) 58);      } } 58 and 58.0 are identical, the empty decimal space is Java's way of letting us know it was a double."},{"location":"Learning%20Java/3%3A%20Data%20Types%20of%20Numbers/#division","title":"Division","text":"<p>There's a basic operation missing, though. Division is a little more complicated.</p> Showpublic class Main {     public static void main(String[] args) {          System.out.println(3 / 2);      } } <p>Huh?</p> <p>It turns out that division of an integer by an integer always returns an integer, even if mathematically the answer is not.</p>"},{"location":"Learning%20Java/3%3A%20Data%20Types%20of%20Numbers/#exercise-2","title":"Exercise #2","text":"<p>Figure out if integer division returns a rounded (closest whole number) or truncated (remove everything after the decimal point) number.</p> SolutionThe number is truncated.  public class Main {     public static void main(String[] args) {          System.out.println(199 / 100);      } }"},{"location":"Learning%20Java/3%3A%20Data%20Types%20of%20Numbers/#exercise-3","title":"Exercise #3","text":"<p>Find a way to get a double result from a division of two integers. Use the below starting point and what you've seen so far!</p> Showpublic class Main {     public static void main(String[] args) {          int a = 5;         int b = 2;         double c = a / b; // change this line!         System.out.println(c);      } } Hint #1What if one of the inputs wasn't an integer? Hint #2Typecast one of the input variables so that it's no longer pure integer division. Solutionpublic class Main {     public static void main(String[] args) {          int a = 5;         int b = 2;         double c = (double) a / b; // or the other way around, or both         System.out.println(c);      } } <ol> <li> <p>For numbers that can be positive or negative. Positive-only numbers are \\(2^{n}-1\\), but they aren't seen in Java.\u00a0\u21a9</p> </li> </ol>"},{"location":"Learning%20Java/4%3A%20Booleans/","title":"4: Booleans","text":"<p>The data type for a variable that can only store one fundamental piece of information is called a boolean. A boolean only has two different possible states: true or false, yes or no, 1 or 0, etc.</p> <p>In Java the type name is <code>boolean</code>, and the possible values are expressed as <code>true</code> or <code>false</code>.</p> <p>The primary use of booleans is for branching program logic. This lets us execute different code depending on conditions that can change as the code runs.</p> <p>This dramatically increases the number of useful things we can do in our programs.</p>"},{"location":"Learning%20Java/4%3A%20Booleans/#if-else","title":"If/ Else","text":"<p>The statement used for program branching takes the form: <pre><code>if (condition1) {\n    // execute some code...\n} else if (condition2) {\n    // execute some different code...\n} else {\n    // more different code...\n}\n</code></pre></p> <p>Each different condition is a boolean value (or evaluates to a boolean value). A flowchart of how an if statement would look something like this:</p> <pre><code>flowchart TD\n    start[Program Entry]\n    exit[Program Exit]\n    condition1[Meets condition 1?]\n    condition2[Meets condition 2?]\n    execute1[Execute Some Code]\n    execute2[Execute Some Different Code]\n    execute3[Execute More Different Code]\n    start--&gt;condition1\n    condition1--&gt;|Yes|execute1\n    condition1--&gt;|No|condition2\n    condition2--&gt;|Yes|execute2\n    condition2--&gt;|No|execute3\n    execute1--&gt;exit\n    execute2--&gt;exit\n    execute3--&gt;exit\n</code></pre> <p>An if statement can include as many <code>else if</code> conditions as you like, including none. <code>else</code> is optional but can only have one instance.</p>"},{"location":"Learning%20Java/4%3A%20Booleans/#exercise-1","title":"Exercise 1","text":"<p>Write a simple if/else statement to print different messages depending on whether <code>isFriend</code> is true.</p> Showpublic class Main {     public static void main(String[] args) {          boolean isFriend = true; // pretend that this value isn't known      } } Solutionpublic class Main {     public static void main(String[] args) {          boolean isFriend = true; // pretend that this value isn't known          if (isFriend) {             System.out.println(\"Hello! Nice to see you again!\");         } else {             System.out.println(\"Nice to meet you!\");         }      } }"},{"location":"Learning%20Java/4%3A%20Booleans/#comparisons","title":"Comparisons","text":"<p>So far we have no way of converting between \"regular\" values and booleans, meaning that our branching logic will be limited. Comparisons check for equality<sup>1</sup> between variables of the same type, returning <code>true</code> if they are equal and <code>false</code> if not.<sup>2</sup></p> <p>A comparison is written using the syntax <code>a == b</code>. This expression evaluates to (can be substituted for) a boolean.</p> <p>Warning</p> <p>The syntax <code>==</code> (comparison) looks very similar to <code>=</code> (assignment).  There can be some cryptic error messages that arise from mixing these up.</p>"},{"location":"Learning%20Java/4%3A%20Booleans/#exercise-2","title":"Exercise 2","text":"<p>Write a piece of code that prints <code>6</code> if a variable is equal to 5, <code>4</code> if the variable is equal to 9, and <code>0</code> otherwise.</p> Showpublic class Main {     public static void main(String[] args) {          int a = 5; // pretend this can change      } } Solutionpublic class Main {     public static void main(String[] args) {          int a = 5; // pretend this can change          if (a == 5) {             System.out.println(6);         } else if (a == 9) {             System.out.println(4);         } else {             System.out.println(0);         }      } }"},{"location":"Learning%20Java/4%3A%20Booleans/#exercise-25","title":"Exercise 2.5","text":"<p>Rewrite your solution to Exercise 2, using only one print statement.</p> HintReread section 1 and specifically variable declaration Solutionpublic class Main {     public static void main(String[] args) {          int a = 5; // pretend this can change          int out;          if (a == 5) {             out = 6;         } else if (a == 9) {             out = 4;         } else {             out = 0;         }          System.out.println(out);      } } <p>While working on that exercise, you may have noticed that the compiler was not very happy with you if you failed to assign a value to <code>out</code> in all program branches. If you declare a variable, it must be defined for every program flow before you use it. Additionally, if you declare a variable inside a program branch, it can't be used outside of it.</p>"},{"location":"Learning%20Java/4%3A%20Booleans/#boolean-logic","title":"Boolean Logic","text":"0 1 0 0 1 1 1 1 <p>Other</p> <ol> <li> <p>\"Equality\" can be somewhat tricky to figure out automatically for more complex data types. In these cases, the type itself provides a specification for the equality check.\u00a0\u21a9</p> </li> <li> <p>Checks for equality of floating-point variables occasionally don't behave entirely correctly. This is because floating-point numbers can be susceptible to a very small amount of rounding error (this is what's happening if you ever see a computer, for example, returning <code>41.9999999999998</code> instead of <code>42</code>).\u00a0\u21a9</p> </li> </ol>"},{"location":"Setting%20Up%20Your%20Programming%20Environment/","title":"WIP","text":""}]}